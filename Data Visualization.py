# -*- coding: utf-8 -*-
"""EEG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nMuBaYs4rmwR81d0mN3ClhUvZoGgsZib
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.svm import LinearSVC
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.metrics import roc_curve, roc_auc_score
from sklearn import metrics

df=pd.read_csv('/content/drive/MyDrive/dataset-eeg.csv')
df

df.drop('Patient_ID',axis=1,inplace=True)
print(df.shape)
df.head()

df.columns = df.columns.str.replace(' ', '')

df.head()

df["MindState"].unique()

df['MindState'].hist(bins=50,figsize=(25,5),alpha=0.6)
plt.show()

df['MindState'].value_counts()

for i in range(df.shape[1]):
    n_miss = df.iloc[:, i].isnull().sum()
    perc = n_miss / df.shape[0] * 100
    print('> %s, Missing: %d (%.1f%%)' % (df.columns[i], n_miss, perc))

df.describe()

df.groupby("MindState").describe()

#df['MindState'][df.MindState == 'Neutral']

#df['MindState'][df.MindState == 'Neutral'].groupby(df['Age']).value_counts()

sns.set(rc={'figure.figsize':(20,8.27)})
sns.countplot(x='Age',hue='MindState',data=df)

sns.countplot(x='Gender',hue='MindState',data=df)

#Alpha Scatter
ha=df['high_Alpha(Hz)'][df['MindState']=='Neutral']
la=df['low_Alpha(Hz)'][df['MindState']=='Neutral']

sns.scatterplot(x=df["Age"], y=ha)
plt.ylabel('(high_Alpha)  (low_Alpha)')
sns.scatterplot(x=df["Age"], y=la)

ha1=df['high_Alpha(Hz)'][df['MindState']=='Depressed']
la1=df['low_Alpha(Hz)'][df['MindState']=='Depressed']

sns.scatterplot(x=df["Age"], y=ha1)
plt.ylabel('(high_Alpha)  (low_Alpha)')
sns.scatterplot(x=df["Age"], y=la1)

ha2=df['high_Alpha(Hz)'][df['MindState']=='Positive']
la2=df['low_Alpha(Hz)'][df['MindState']=='Positive']

sns.scatterplot(x=df["Age"], y=ha2)
plt.ylabel('(high_Alpha)  (low_Alpha)')
sns.scatterplot(x=df["Age"], y=la2)

ha3=df['high_Alpha(Hz)'][df['MindState']=='Anxiety']
la3=df['low_Alpha(Hz)'][df['MindState']=='Anxiety']

sns.scatterplot(x=df["Age"], y=ha3)
plt.ylabel('(high_Alpha)  (low_Alpha)')
sns.scatterplot(x=df["Age"], y=la3)

#Beta Scatter
hb=df['high_Beta(Hz)'][df['MindState']=='Neutral']
lb=df['low_Beta(Hz)'][df['MindState']=='Neutral']

sns.scatterplot(x=df["Age"], y=hb)
plt.ylabel('(high_Beta)  (low_Beta)')
sns.scatterplot(x=df["Age"], y=lb)

hb1=df['high_Beta(Hz)'][df['MindState']=='Depressed']
lb1=df['low_Beta(Hz)'][df['MindState']=='Depressed']

sns.scatterplot(x=df["Age"], y=hb1)
plt.ylabel('(high_Beta)  (low_Beta)')
sns.scatterplot(x=df["Age"], y=lb1)

hb2=df['high_Beta(Hz)'][df['MindState']=='Positive']
lb2=df['low_Beta(Hz)'][df['MindState']=='Positive']

sns.scatterplot(x=df["Age"], y=hb2)
plt.ylabel('(high_Beta)  (low_Beta)')
sns.scatterplot(x=df["Age"], y=lb2)

hb3=df['high_Beta(Hz)'][df['MindState']=='Anxiety']
lb3=df['low_Beta(Hz)'][df['MindState']=='Anxiety']

sns.scatterplot(x=df["Age"], y=hb3)
plt.ylabel('(high_Beta)  (low_Beta)')
sns.scatterplot(x=df["Age"], y=lb3)

#Gamma Scatter
a=df['high_Gamma(Hz)'][df['MindState']=='Neutral']
b=df['low_Gamma(Hz)'][df['MindState']=='Neutral']

sns.scatterplot(x=df["Age"], y=a)
plt.ylabel('(high_Gamma)  (low_Gamma)')
sns.scatterplot(x=df["Age"], y=b)

a1=df['high_Gamma(Hz)'][df['MindState']=='Depressed']
b1=df['low_Gamma(Hz)'][df['MindState']=='Depressed']

sns.scatterplot(x=df["Age"], y=a1)
plt.ylabel('(high_Gamma)  (low_Gamma)')
sns.scatterplot(x=df["Age"], y=b1)

a2=df['high_Gamma(Hz)'][df['MindState']=='Positive']
b2=df['low_Gamma(Hz)'][df['MindState']=='Positive']

sns.scatterplot(x=df["Age"], y=a2)
plt.ylabel('(high_Gamma)  (low_Gamma)')
sns.scatterplot(x=df["Age"], y=b2)

a3=df['high_Gamma(Hz)'][df['MindState']=='Anxiety']
b3=df['low_Gamma(Hz)'][df['MindState']=='Anxiety']

sns.scatterplot(x=df["Age"], y=a3)
plt.ylabel('(high_Gamma)  (low_Gamma)')
sns.scatterplot(x=df["Age"], y=b3)

df.Gender[df.Gender == 'M'] = 1
df.Gender[df.Gender == 'F'] = 0

df.head(10)

e=df['MindState']

le = LabelEncoder()
e = le.fit_transform(e)

e

X1 = df.drop('MindState', axis=1)
Y1=np.array(e)

Y1

X_train, X_test, y_train, y_test = train_test_split(X1, Y1, test_size=0.25, random_state=77)
print(len(X_train))
print(len(X_test))

y_train

"""# Random Forest"""

rf= RandomForestClassifier (n_estimators=10, max_features="auto", random_state=77)

rf.fit(X_train,y_train)

y_pred=rf.predict(X_test)

score1=accuracy_score(y_test,y_pred)*100
print("Accuracy using random forest: ", round(score1,1),"%")

prediction = list(map(round,y_pred))
print(prediction)

print('Actual class :', list(y_test))
print('Predicted class:', prediction)

cm = confusion_matrix (y_test, prediction)
print(cm)

print("Precision:", metrics.precision_score(y_test, y_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y_pred,average='macro'))

pred=rf.predict_proba(X_test)
auc=metrics.roc_auc_score(y_test,pred,multi_class='ovr')
print('Area Under Curve:',auc)

#ROC curve
y_pred_proba = rf.predict_proba(X_test)[::,1]
fpr,tpr,thresh=roc_curve(y_test,y_pred_proba,pos_label=1)

plt.figure()
plt.plot(fpr,tpr,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

"""# KNN"""

knn = KNeighborsClassifier(n_neighbors=80)

knn.fit(X_train,y_train)

y2_pred=knn.predict(X_test)

score2=accuracy_score(y_test,y2_pred)*100
print("Accuracy using KNeighbours: ", round(score2,1),"%")

prediction2 = list(map(round,y2_pred))
print(prediction2)

print('Actual class :', list(y_test))
print('Predicted class:', prediction2)

cm2 = confusion_matrix (y_test, prediction2)
print(cm2)

print("Precision:", metrics.precision_score(y_test, y2_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y2_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y2_pred,average='macro'))

pred2=knn.predict_proba(X_test)
auc2=metrics.roc_auc_score(y_test,pred2,multi_class='ovr')
print('Area Under Curve:',auc2)

#ROC curve
y_pred_proba2 = knn.predict_proba(X_test)[::,1]
fpr2,tpr2,thresh2=roc_curve(y_test,y_pred_proba2,pos_label=1)

plt.figure()
plt.plot(fpr2,tpr2,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

"""# Normal SVM"""

svm = SVC()

svm.fit(X_train,y_train)

y3_pred=svm.predict(X_test)

score3=accuracy_score(y_test,y3_pred)*100
print("Accuracy using SVM: ", round(score3,1),"%")

"""# SVM linear"""

svm1= SVC(kernel='linear', max_iter=1000, random_state=50, gamma=2, C=1.0, probability=True)

svm1.fit(X_train,y_train)

y4_pred=svm1.predict(X_test)

score4=accuracy_score(y_test,y4_pred)*100
print("Accuracy using SVM: ", round(score4,1),"%")

prediction4 = list(map(round,y4_pred))
print(prediction4)

print('Actual class :', list(y_test))
print('Predicted class:', prediction4)

cm4 = confusion_matrix (y_test, prediction4)
print(cm4)

print("Precision:", metrics.precision_score(y_test, y4_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y4_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y4_pred,average='macro'))

pred4=svm1.predict_proba(X_test)
auc4=metrics.roc_auc_score(y_test,pred4,multi_class='ovr')
print('Area Under Curve:',auc4)

#ROC curve
y_pred_proba4 = svm1.predict_proba(X_test)[::,1]
fpr4,tpr4,thresh4=roc_curve(y_test,y_pred_proba4,pos_label=1)

plt.figure()
plt.plot(fpr4,tpr4,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

"""# SVM polynomial"""

svm2= SVC(kernel='poly', max_iter=1000, random_state=50, gamma=2, C=1.0, probability=True)

svm2.fit(X_train,y_train)

y5_pred=svm2.predict(X_test)

score5=accuracy_score(y_test,y5_pred)*100
print("Accuracy using SVM: ", round(score5,1),"%")

prediction5 = list(map(round,y5_pred))
print(prediction5)

print('Actual class :', list(y_test))
print('Predicted class:', prediction5)

cm5 = confusion_matrix (y_test, prediction5)
print(cm5)

print("Precision:", metrics.precision_score(y_test, y5_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y5_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y5_pred,average='macro'))

pred5=svm2.predict_proba(X_test)
auc5=metrics.roc_auc_score(y_test,pred5,multi_class='ovr')
print('Area Under Curve:',auc5)

#ROC curve
y_pred_proba5 = svm2.predict_proba(X_test)[::,1]
fpr5,tpr5,thresh5=roc_curve(y_test,y_pred_proba5,pos_label=1)

plt.figure()
plt.plot(fpr5,tpr5,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

"""# SVM RBF"""

svm3= SVC(kernel='rbf', max_iter=1000, random_state=50, gamma=2, C=1.0, probability=True)

svm3.fit(X_train,y_train)

y6_pred=svm3.predict(X_test)

score6=accuracy_score(y_test,y6_pred)*100
print("Accuracy using SVM: ", round(score6,1),"%")

prediction6 = list(map(round,y6_pred))
print(prediction6)

print('Actual class :', list(y_test))
print('Predicted class:', prediction6)

cm6 = confusion_matrix (y_test, prediction6)
print(cm6)

print("Precision:", metrics.precision_score(y_test, y6_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y6_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y6_pred,average='macro'))

pred6=svm3.predict_proba(X_test)
auc6=metrics.roc_auc_score(y_test,pred6,multi_class='ovr')
print('Area Under Curve:',auc6)

#ROC curve
y_pred_proba6 = svm3.predict_proba(X_test)[::,1]
fpr6,tpr6,thresh6=roc_curve(y_test,y_pred_proba6,pos_label=1)

plt.figure()
plt.plot(fpr6,tpr6,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

"""# SVM Sigmoid"""

svm4= SVC(kernel='sigmoid', max_iter=1000, random_state=50, gamma=2, C=1.0, probability=True)

svm4.fit(X_train,y_train)

y7_pred=svm4.predict(X_test)

score7=accuracy_score(y_test,y7_pred)*100
print("Accuracy using SVM: ", round(score7,1),"%")

prediction7 = list(map(round,y7_pred))
print(prediction7)

print('Actual class :', list(y_test))
print('Predicted class:', prediction7)

cm7 = confusion_matrix (y_test, prediction7)
print(cm7)

print("Precision:", metrics.precision_score(y_test, y7_pred,average='macro'))
print("Recall:", metrics.recall_score(y_test, y7_pred,average='macro'))
print('F1 Score:' ,f1_score(y_test, y7_pred,average='macro'))

pred7=svm4.predict_proba(X_test)
auc7=metrics.roc_auc_score(y_test,pred7,multi_class='ovr')
print('Area Under Curve:',auc7)

#ROC curve
y_pred_proba7 = svm4.predict_proba(X_test)[::,1]
fpr7,tpr7,thresh7=roc_curve(y_test,y_pred_proba6,pos_label=1)

plt.figure()
plt.plot(fpr7,tpr7,linestyle='--',color='blue')
plt.plot([0,1],[0,1],'r--')
plt.title('ROC Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.show()

features = np.array([[1,35,8.33,10.95,17.68,22.94,161.64,166.19]])
p=svm1.predict(features)
print("Prediction: {}".format(le.inverse_transform(p)))

accuracy=[score1,score2,score3,score4,score5,score6,score7]
algo=['Random Forest','KNN','Normal SVM','SVM(linear)','SVM(polynomial)','SVM(rbf)','SVM(sigmoid)']

 
plt.xlabel("Algorithm")
plt.ylabel("Accuracy")
plt.title("Accuracy of different algorithm for detecting mindstates")
p1 = plt.bar(np.arange(len(accuracy)), accuracy)
for rect1 in p1:
    height = rect1.get_height()
    plt.annotate( "{:.2f}%".format(height),(rect1.get_x() + rect1.get_width()/2, height+.05),ha="center",va="bottom",fontsize=15)

plt.bar(algo,accuracy, color ='maroon',
        width = 0.9)
